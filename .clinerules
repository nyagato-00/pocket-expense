# Pocket Expense プロジェクトルール

## プロジェクト固有のパターン

### 命名規則

- **ファイル名**: PascalCase（コンポーネント）、camelCase（ユーティリティ）
- **変数名**: camelCase
- **定数**: UPPER_SNAKE_CASE
- **型名**: PascalCase
- **インターフェース名**: PascalCase（接頭辞 'I' なし）

### コード構造

- **バックエンド**:
  - ルーターは機能ごとに分割（auth, user, expense）
  - ミドルウェアは middleware/ ディレクトリに配置
  - ユーティリティは utils/ ディレクトリに配置

- **フロントエンド**:
  - コンポーネントは components/ ディレクトリに配置
  - ページは pages/ ディレクトリに配置
  - コンテキストは contexts/ ディレクトリに配置
  - ユーティリティは utils/ ディレクトリに配置

### 認証パターン

- JWTトークンはローカルストレージに保存
- リフレッシュトークンはローカルストレージに保存
- トークンはリクエストヘッダーに Bearer トークンとして付与
- 認証状態はReactコンテキストで管理

### エラーハンドリング

- バックエンドでは TRPCError を使用
- フロントエンドでは try-catch でエラーをキャッチし、ユーザーにフィードバック

## 学習した内容

### tRPC

- tRPCを使用することで、バックエンドとフロントエンド間で型安全な通信が可能
- ルーターは機能ごとに分割し、インデックスファイルでマージ
- ミドルウェアを使用して認証・認可を実装
- プロシージャは publicProcedure, protectedProcedure, adminProcedure, approverProcedure の4種類

### Prisma ORM

- スキーマファイルでデータモデルを定義
- マイグレーションを使用してデータベースを更新
- リレーションを使用してモデル間の関連を定義
- Prismaクライアントを使用してデータベースにアクセス

### JWT認証

- JWTを使用してステートレスな認証を実装
- アクセストークンとリフレッシュトークンの2種類のトークンを使用
- リフレッシュトークンはデータベースに保存し、再利用を防止
- トークンの有効期限を設定し、セキュリティを強化

### React Context API

- コンテキストを使用して認証状態を管理
- プロバイダーコンポーネントでコンテキスト値を提供
- カスタムフックを使用してコンテキスト値にアクセス
- ローカルストレージを使用してトークンを永続化

## 今後の学習目標

- フロントエンドのルーティング（React Router）
- フォーム管理（React Hook Form）
- UIコンポーネントライブラリの活用
- テスト駆動開発（Jest, React Testing Library）
- Storybookを使用したコンポーネント開発
- セキュリティベストプラクティス
